name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set environment variables
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build --progress=plain
          docker-compose -f docker-compose.yml push
      
      - name: Verify Pushed Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/edc-steal-share:latest

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Create a network for Redis and your application
            docker network create app-network || true

            # Stop and remove existing containers
            docker stop redis || true
            docker rm redis || true
            
            # Start Redis container
            docker run -d --name redis --network app-network -p 6379:6379 redis:alpine

            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/edc-steal-share:latest

            # Stop and remove existing application container
            docker stop edc-steal-share || true
            docker rm edc-steal-share || true
            docker rmi sidvish/edc-steal-share:latest || true
            
            # Start the application container
            docker run -d --name edc-steal-share \
              --network app-network \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_SECRET_PLAYER=${{ secrets.JWT_SECRET_PLAYER }} \
              -e SERVICE_ACCOUNT_KEY=${{ secrets.SERVICE_ACCOUNT_KEY }} \
              -e GOOGLE_SERVER_CAPTCHA_KEY=${{ secrets.GOOGLE_SERVER_CAPTCHA_KEY }} \
              -p 8080:8080 \
              ${{ secrets.DOCKER_USERNAME }}/edc-steal-share:latest
